pipeline {
    agent any
    environment {
        registry = "roibelo/my_repository"
        registryCredential = 'docker-hub'
        dockerImage = ''
        dockerfilePath = "Backend/Dockerfile" // Path to the Dockerfile
        tag = "v1.0.0" // Tag for the Docker image
        }
    stages {
        stage('Pull code') {
            steps {
                script {
                    properties([pipelineTriggers([pollSCM('H/30 * * * *')])])
                }
                git 'https://github.com/roibelo/CourseProject.git'
            }
        }
        stage('Set PYTHONPATH') {
            steps {
                bat 'set PYTHONPATH=%WORKSPACE%\\CourseProject;%PYTHONPATH%'
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    // Install modules
                    if (checkOs() == 'Windows') {
                        bat 'pip install requests'
                        bat 'pip install selenium'
                        bat 'pip install chromedriver-binary'
                        bat 'pip install pymysql'
                        bat 'pip install datetime'
                    } else {
                        sh 'pip install requests'
                        sh 'pip install selenium'
                        sh 'pip install chromedriver-binary'
                        sh 'pip install pymysql'
                        sh 'pip install datetime'
                    }
                }
            }
        }
        stage('Run rest_app.py') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start/min python Backend/rest_app.py'
                    } else {
                        sh 'nohup python Backend/rest_app.py'
                    }
                }
            }
        }
        stage('Run backend_testing.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python Backend/backend_testing.py'
                    } else {
                        sh 'python Test/backend_testing.py'
                    }
                }
            }
        }
        stage('Run clean_environment.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python Backend/clean_environment.py'
                    } else {
                        sh 'python clean_environment.py'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                /*script {
                    dockerImage = docker.build("${registry}:${tag}", "-f ${dockerfilePath} .")
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }*/
                 dir('Backend') {
                    bat 'docker build -t project_course_image4 .'
                }
            }
            /*post {
                always {
                    bat "docker rmi ${registry}:${tag}"
                }
            }*/
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                        bat '''
                            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                            docker tag project_course_image4 roibelo/my_repository:v1.0.0
                            docker push roibelo/my_repository:v1.0.0
                        '''
                    }
                }
            }
        }
        stage('Docker Compose-Up -d') {
            steps {
                script {
                    dir('Backend') {
                        bat "docker-compose up -d"
                    }
                }
            }
        }
        stage('Wait for Docker compose') {
            steps {
                script {
                    def isReady = false
                    def maxRetries = 10
                    def retries = 0

                    while (!isReady && retries < maxRetries) {
                        try {
                            bat 'docker-compose ps'
                            isReady = true
                        } catch (Exception e) {
                            retries++
                            sleep(10) // Wait for 10 seconds before checking again
                        }
                    }

                    if (!isReady) {
                        error "Docker compose did not start within the specified time"
                    }
                }
            }
        }
        stage('Test dockerized app') {
            steps {
                script {
                    bat 'python Docker/docker_backend_testing.py'
                }
            }
        }
        stage('Clean environment') {
            steps {
                script {
                    bat 'docker-compose down'
                }
            }
        }
    }
}

def checkOs(){
    if (isUnix()) {
        def uname = sh script: 'uname', returnStdout: true
        if (uname.startsWith("Darwin")) {
            return "Macos"
        }
        else {
            return "Linux"
        }
    }
    else {
        return "Windows"
    }
}