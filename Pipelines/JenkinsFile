pipeline {
    agent any
    stages {
        stage('Pull code') {
            steps {
                script {
                    properties([pipelineTriggers([pollSCM('H/3 * * * *')])])
                }
                git 'https://github.com/roibelo/CourseProject.git'
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    // Install modules
                    if (checkOs() == 'Windows') {
                        bat 'pip install requests'
                        bat 'pip install selenium'
                        bat 'pip install chromedriver-binary'
                        bat 'pip install pymysql'
                        bat 'pip install datetime'
                    } else {
                        sh 'pip install requests'
                        sh 'pip install selenium'
                        sh 'pip install chromedriver-binary'
                        sh 'pip install pymysql'
                        sh 'pip install datetime'
                    }
                }
            }
        }
        stage('Run rest_app.py') {
            steps {
                script {
                    if (checkOs() == 'Windows') {
                        bat 'start/min python Backend/rest_app.py'
                    } else {
                        sh 'nohup python Backend/rest_app.py'
                    }
                }
            }
        }
        stage('Run web_app.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'start/min python Web/web_app.py'
                    } else {
                        sh 'nohup python Web/web_app.py'
                    }
                }
            }
        }
        stage('Run backend_testing.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python Test/backend_testing.py'
                    } else {
                        sh 'python Test/backend_testing.py'
                    }
                }
            }
        }
        stage('Run frontend_testing.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python Test/frontend_testing.py'
                    } else {
                        sh 'python Test/frontend_testing.py'
                    }
                }
            }
        }
        stage('Run combined_testing.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python Test/combined_testing.py'
                    } else {
                        sh 'python Test/combined_testing.py'
                    }
                }
            }
        }
        stage('Run clean_environment.py') {
            steps {
                script {
                     if (checkOs() == 'Windows') {
                        bat 'python clean_environment.py'
                    } else {
                        sh 'python clean_environment.py'
                    }
                }
            }
        }
    }
}

def checkOs(){
    if (isUnix()) {
        def uname = sh script: 'uname', returnStdout: true
        if (uname.startsWith("Darwin")) {
            return "Macos"
        }
        else {
            return "Linux"
        }
    }
    else {
        return "Windows"
    }
}